<?php

namespace AppBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;

/**
 * UtilisateurRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateurRepository extends EntityRepository implements UserProviderInterface
{
	public function loadUserByUserName($username)
    {
        $qb = $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.roles', 'r')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username);
            

        return $qb
	    ->getQuery()
	    ->getOneOrNullResult();
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    } 

    public function getUtilisateurParId($id)
    {
        $qb = $this
            ->createQueryBuilder('u')
            ->where('u.id = :id')
            ->setParameter('id', $id);
            
        return $qb
        ->getQuery()
        ->getSingleResult();        
    }

    public function getUtilisateurEtDroitsParId($id)
    {
        $qb = $this
            ->createQueryBuilder('u')
            ->select('u, r')
            ->leftJoin('u.roles', 'r')
            ->where('u.id = :id')
            ->setParameter('id', $id);
            
        return $qb
        ->getQuery()
        ->getSingleResult();        
    }

}