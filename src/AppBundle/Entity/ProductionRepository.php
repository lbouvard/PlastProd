<?php

namespace AppBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductionRepository extends EntityRepository
{
	public function getProduction()
	{
		$qb = $this->createQueryBuilder('p')
			->join('p.produit','produit')
			->addSelect('produit.nomProduit')
			->join('p.chaine','chaine')
			->addSelect('chaine.nomChaine')
			->join('p.etat','etat')
			->addSelect('etat.nomEtat')
			->join('p.causeRebu', 'rebu')
			->addSelect('rebu.nomRebu');


		return $qb
			->getQuery()
			->getResult();
			
	}
	
	public function getProductionEnCours()
	{
		$qb = $this->createQueryBuilder('p')
			->select(array('p.idtElement', 'p.codeInterne', 'p.dateDebut'))
			->join('p.chaine','chaine')
			->addSelect('chaine.nomChaine')
			->join('p.etat','etat')
			->addSelect('etat.nomEtat')
			->where('p.bitModif = :faux')
			->andWhere('p.bitFin = :faux')
			->setParameters(array('faux' => 0));

		return $qb
			->getQuery()
			->getResult();
	}

	public function getProductionCode($code)
	{
		$qb = $this->createQueryBuilder('p')
			->join('p.produit','produit')
			->addSelect('produit.codeProduit')
			->join('p.chaine','chaine')
			->addSelect('chaine.nomChaine')
			->join('p.etat','etat')
			->addSelect('etat.nomEtat')
			->leftjoin('p.causeRebu', 'rebu')
			->addSelect('rebu.nomRebu')
			->where('p.codeInterne= :id')
			->setParameters(array('id'=>$code))
			->orderBy('p.dateDebut','ASC');

		return $qb
			->getQuery()
			->getResult();
			
	}

	public function getProductionLigneRebut($code)
	{
		$qb = $this->createQueryBuilder('p')
			->join('p.produit','produit')
			->addSelect('produit.codeProduit')
			->join('p.chaine','chaine')
			->addSelect('chaine.nomChaine')
			->join('p.etat','etat')
			->addSelect('etat.nomEtat')
			->leftjoin('p.causeRebu', 'rebu')
			->addSelect('rebu.nomRebu')
			->where('p.codeInterne = :id')
			->andWhere('p.bitRebu = :vrai')
			->setParameters(array('id'=>$code, 'vrai' => true));

		return $qb
			->getQuery()
			->getResult();
	}
	
	public function getProductionRebut()
	{
		$qb = $this->createQueryBuilder('p')
			->select('p.codeInterne')
			->where('p.bitRebu = :vrai')
			->setParameters(array('vrai' => 1));

		return $qb
			->getQuery()
			->getResult();		
	}

	public function getProductionLigneFinie($code)
	{
		$qb = $this->createQueryBuilder('p')
			->join('p.produit','produit')
			->addSelect('produit.codeProduit')
			->join('p.chaine','chaine')
			->addSelect('chaine.nomChaine')
			->join('p.etat','etat')
			->addSelect('etat.nomEtat')
			->leftjoin('p.causeRebu', 'rebu')
			->addSelect('rebu.nomRebu')
			->where('p.codeInterne = :id')
			->andWhere('p.bitFin = :vrai')
			->andWhere('p.bitRebu = :faux')
			->setParameters(array('id'=>$code, 'vrai' => true, 'faux' => false));

		return $qb
			->getQuery()
			->getResult();
	}
	
	public function getProductionFinie()
	{
		$qb = $this->createQueryBuilder('p')
			->select('p.codeInterne')
			->where('p.bitRebu = :faux')
			->andWhere('p.bitFin = :vrai')
			->setParameters(array('vrai' => 1, 'faux' => 0));

		return $qb
			->getQuery()
			->getResult();		
	}

	public function getProductionParIdt($idt)
	{
		$qb = $this->createQueryBuilder('p')
			->join('p.produit','produit')
			->addSelect('produit.codeProduit')
			->join('p.chaine','chaine')
			->addSelect('chaine.nomChaine')
			->join('p.etat','etat')
			->addSelect('etat.nomEtat')
			->leftjoin('p.causeRebu', 'rebu')
			->addSelect('rebu.nomRebu')
			->where('p.idtElement= :id')
			->setParameters(array('id'=> $idt));

		return $qb
			->getQuery()
			->getSingleResult();
	}
}
